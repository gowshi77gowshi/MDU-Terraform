trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  TF_STORAGE_ACCOUNT: "storageaccountmdu001"
  TF_CONTAINER_NAME: "mdu-statefile"
  TF_STATE_FILE: "terraform.tfstate"
  TF_RESOURCE_GROUP: "rg-mdu-dev-001"

# ========================== PLAN STAGE ==========================
stages:
- stage: Terraform_Plan
  displayName: "Terraform Plan"
  jobs:
    - job: Plan
      displayName: "Run Terraform Plan"
      steps:
        # 1. Pull all secrets from Key Vault
        - task: AzureKeyVault@2
          name: FetchSecrets
          inputs:
            azureSubscription: 'mdu-conn'
            KeyVaultName: 'kv-Mdu-dev-uksouth-001'
            SecretsFilter: '*'
            RunAsPreJob: true

        # 2. Install Terraform
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: '1.9.8'

        # 3. Map Key Vault secrets to Terraform variables (underscore fix)
        - bash: |
            echo "##[group]Exporting Key Vault secrets as TF_VAR_ variables"
            for secret in $(compgen -A variable); do
              # Ignore system variables
              if [[ $secret != TF_* && $secret != BUILD_* && $secret != SYSTEM_* && $secret != AGENT_* ]]; then
                fixed_name=$(echo $secret | tr '-' '_') # replace hyphens with underscores
                export TF_VAR_${fixed_name}=${!secret}
                echo "Mapped Key Vault secret $secret -> TF_VAR_${fixed_name}"
              fi
            done
            echo "##[endgroup]"
          displayName: "Map KeyVault secrets to TF_VAR_"

        # 4. Terraform Init
        - script: |
            terraform init \
              -backend-config="resource_group_name=$(TF_RESOURCE_GROUP)" \
              -backend-config="storage_account_name=$(TF_STORAGE_ACCOUNT)" \
              -backend-config="container_name=$(TF_CONTAINER_NAME)" \
              -backend-config="key=$(TF_STATE_FILE)"
          displayName: 'Terraform Init'

        # 5. Terraform Plan (save output as artifact)
        - script: terraform plan -out=tfplan
          displayName: 'Terraform Plan'

        - publish: $(System.DefaultWorkingDirectory)/tfplan
          artifact: terraform-plan


# ========================== APPLY & DESTROY STAGE ==========================
- stage: Terraform_Release
  displayName: "Terraform Apply & Destroy"
  dependsOn: Terraform_Plan
  condition: succeeded('Terraform_Plan')
  jobs:
    - deployment: Release
      displayName: "Terraform Apply & Destroy"
      environment: 'production'   # Creates approval gate
      strategy:
        runOnce:
          deploy:
            steps:
              # 1. Fetch KeyVault secrets again
              - task: AzureKeyVault@2
                inputs:
                  azureSubscription: 'mdu-conn'
                  KeyVaultName: 'kv-Mdu-dev-uksouth-001'
                  SecretsFilter: '*'

              # 2. Install Terraform
              - task: TerraformInstaller@1
                inputs:
                  terraformVersion: '1.9.8'

              # 3. Map KeyVault secrets back to TF_VAR_
              - bash: |
                  for secret in $(compgen -A variable); do
                    if [[ $secret != TF_* && $secret != BUILD_* && $secret != SYSTEM_* && $secret != AGENT_* ]]; then
                      fixed_name=$(echo $secret | tr '-' '_')
                      export TF_VAR_${fixed_name}=${!secret}
                    fi
                  done
                displayName: "Map KeyVault secrets to TF_VAR_"

              # 4. Download plan artifact
              - download: current
                artifact: terraform-plan

              # 5. Terraform Apply
              - script: terraform apply -auto-approve tfplan
                displayName: 'Terraform Apply'

              # 6. Terraform Destroy (manual control)
              - script: terraform destroy -auto-approve
                displayName: 'Terraform Destroy'
                condition: and(succeeded(), eq(variables['DestroyResources'], 'true'))































# trigger:
#   branches:
#     include:
#       - main

# pool:
#   vmImage: 'ubuntu-latest'

# variables:
#   TF_STORAGE_ACCOUNT: "storageaccountmdu001"
#   TF_CONTAINER_NAME: "mdu-statefile"
#   TF_STATE_FILE: "terraform.tfstate"
#   TF_RESOURCE_GROUP: "rg-mdu-dev-001"

# steps:
# # Fetch secrets from Key Vault
# - task: AzureKeyVault@2
#   name: FetchSecrets
#   inputs:
#     azureSubscription: 'mdu-conn'
#     KeyVaultName: 'kv-Mdu-dev-uksouth-001'
#     SecretsFilter: '*'
#     RunAsPreJob: true

# # # Build terraform.tfvars dynamically
# # - script: |
# #     echo "Building terraform.tfvars from Key Vault secrets..."
# #     rm -f terraform.tfvars
# #     for secret in $(compgen -A variable); do
# #       echo "$secret = \"${!secret}\"" >> terraform.tfvars
# #     done
# #     echo "Generated terraform.tfvars:"
# #     cat terraform.tfvars
# #   displayName: 'Generate terraform.tfvars from Key Vault'
# #   env:
# #     $(FetchSecrets.SECRET_VARIABLES)

# # Build terraform.tfvars dynamically
# - bash: |
#     echo "Building terraform.tfvars from Key Vault secrets..."
#     rm -f terraform.tfvars

#     # Loop through all environment variables that were pulled from Key Vault
#     for var in $(printenv | awk -F= '{print $1}' | grep -v '^PATH$'); do
#       value=$(printenv $var)
#       echo "$var = \"$value\"" >> terraform.tfvars
#     done

#     echo "Generated terraform.tfvars:"
#     cat terraform.tfvars
#   displayName: 'Generate terraform.tfvars from Key Vault'


# - task: TerraformInstaller@1
#   inputs:
#     terraformVersion: '1.9.8'

# - script: |
#     terraform init \
#       -backend-config="resource_group_name=$(TF_RESOURCE_GROUP)" \
#       -backend-config="storage_account_name=$(TF_STORAGE_ACCOUNT)" \
#       -backend-config="container_name=$(TF_CONTAINER_NAME)" \
#       -backend-config="key=$(TF_STATE_FILE)"
#   displayName: 'Terraform Init'

# - script: terraform plan -out=tfplan
#   displayName: 'Terraform Plan'

# - script: terraform apply -auto-approve tfplan
#   displayName: 'Terraform Apply'














# # trigger:
# #   branches:
# #     include:
# #       - main

# # pool:
# #   vmImage: 'ubuntu-latest'

# # variables:
# #   TF_STORAGE_ACCOUNT: "storageaccountmdu001"
# #   TF_CONTAINER_NAME: "mdu-statefile"
# #   TF_STATE_FILE: "terraform.tfstate"
# #   TF_RESOURCE_GROUP: "rg-mdu-dev-001"

# # stages:
# # # ========================== PLAN STAGE ==========================
# # - stage: Terraform_Plan
# #   displayName: "Terraform Plan"
# #   jobs:
# #     - job: Plan
# #       displayName: "Run Terraform Plan"
# #       steps:
# #         # 1. Fetch secrets from Key Vault
# #         - task: AzureKeyVault@2
# #           name: FetchSecrets
# #           inputs:
# #             azureSubscription: 'mdu-conn'
# #             KeyVaultName: 'kv-Mdu-dev-uksouth-001'
# #             SecretsFilter: '*'
# #             RunAsPreJob: true

# #         # 2. Install Terraform
# #         - task: TerraformInstaller@1
# #           inputs:
# #             terraformVersion: '1.9.8'

# #         # 3. Export all KeyVault secrets as TF_VAR_ env variables dynamically
# #         - bash: |
# #             echo "##[group]Exporting Key Vault secrets as TF_VAR_ variables"
# #             for secret in $(compgen -A variable); do
# #               if [[ $secret != TF_* && $secret != BUILD_* && $secret != SYSTEM_* ]]; then
# #                 export TF_VAR_$secret=${!secret}
# #                 echo "Exported TF_VAR_$secret"
# #               fi
# #             done
# #             echo "##[endgroup]"
# #           displayName: "Map KeyVault secrets to TF_VAR_"

# #         # 4. Terraform Init
# #         - script: |
# #             terraform init \
# #               -backend-config="resource_group_name=$(TF_RESOURCE_GROUP)" \
# #               -backend-config="storage_account_name=$(TF_STORAGE_ACCOUNT)" \
# #               -backend-config="container_name=$(TF_CONTAINER_NAME)" \
# #               -backend-config="key=$(TF_STATE_FILE)"
# #           displayName: 'Terraform Init'

# #         # 5. Terraform Plan (output file to artifacts)
# #         - script: terraform plan -out=tfplan
# #           displayName: 'Terraform Plan'
# #           env:
# #             ARM_CLIENT_ID: $(servicePrincipalId)
# #             ARM_CLIENT_SECRET: $(servicePrincipalKey)
# #             ARM_SUBSCRIPTION_ID: $(subscriptionId)
# #             ARM_TENANT_ID: $(tenantId)

# #         # 6. Publish plan artifact
# #         - publish: $(System.DefaultWorkingDirectory)/tfplan
# #           artifact: terraform-plan


# # # ========================== APPLY STAGE ==========================
# # - stage: Terraform_Apply
# #   displayName: "Terraform Apply"
# #   dependsOn: Terraform_Plan
# #   condition: succeeded('Terraform_Plan')
# #   jobs:
# #     - deployment: Apply
# #       displayName: "Run Terraform Apply"
# #       environment: 'production'   # Creates an approval gate
# #       strategy:
# #         runOnce:
# #           deploy:
# #             steps:
# #               # 1. Fetch KeyVault secrets again
# #               - task: AzureKeyVault@2
# #                 inputs:
# #                   azureSubscription: 'mdu-conn'
# #                   KeyVaultName: 'kv-Mdu-dev-uksouth-001'
# #                   SecretsFilter: '*'

# #               # 2. Install Terraform
# #               - task: TerraformInstaller@1
# #                 inputs:
# #                   terraformVersion: '1.9.8'

# #               # 3. Download plan artifact
# #               - download: current
# #                 artifact: terraform-plan

# #               # 4. Export all KeyVault secrets as TF_VAR_ env variables dynamically
# #               - bash: |
# #                   for secret in $(compgen -A variable); do
# #                     if [[ $secret != TF_* && $secret != BUILD_* && $secret != SYSTEM_* ]]; then
# #                       export TF_VAR_$secret=${!secret}
# #                     fi
# #                   done
# #                 displayName: "Map KeyVault secrets to TF_VAR_"

# #               # 5. Terraform Apply (auto-approve)
# #               - script: terraform apply -auto-approve tfplan
# #                 displayName: 'Terraform Apply'
# #                 env:
# #                   ARM_CLIENT_ID: $(servicePrincipalId)
# #                   ARM_CLIENT_SECRET: $(servicePrincipalKey)
# #                   ARM_SUBSCRIPTION_ID: $(subscriptionId)
# #                   ARM_TENANT_ID: $(tenantId)


















# # trigger:
# #   branches:
# #     include:
# #       - main   # Change branch if needed

# # pool:
# #   vmImage: 'ubuntu-latest'

# # variables:
# #   TF_STORAGE_ACCOUNT: "storageaccountmdu001"
# #   TF_CONTAINER_NAME: "mdu-statefile"
# #   TF_STATE_FILE: "terraform.tfstate"
# #   TF_RESOURCE_GROUP: "rg-mdu-dev-001"

# # steps:
# # - task: AzureKeyVault@2
# #   inputs:
# #     azureSubscription: 'mdu-conn'
# #     KeyVaultName: 'kv-Mdu-dev-uksouth-001'
# #     SecretsFilter: '*'
# #     RunAsPreJob: true

# # - task: TerraformInstaller@1
# #   inputs:
# #     terraformVersion: '1.9.8'   # Choose the version you want

# # - script: |
# #     terraform init \
# #       -backend-config="resource_group_name=$(TF_RESOURCE_GROUP)" \
# #       -backend-config="storage_account_name=$(TF_STORAGE_ACCOUNT)" \
# #       -backend-config="container_name=$(TF_CONTAINER_NAME)" \
# #       -backend-config="key=$(TF_STATE_FILE)"
# #   displayName: 'Terraform Init'

# # - script: terraform plan -out=tfplan
# #   displayName: 'Terraform Plan'
# #   env:
# #     ARM_CLIENT_ID: $(servicePrincipalId)
# #     ARM_CLIENT_SECRET: $(servicePrincipalKey)
# #     ARM_SUBSCRIPTION_ID: $(subscriptionId)
# #     ARM_TENANT_ID: $(tenantId)

# # - script: terraform apply -auto-approve tfplan
# #   displayName: 'Terraform Apply'
# #   env:
# #     ARM_CLIENT_ID: $(servicePrincipalId)
# #     ARM_CLIENT_SECRET: $(servicePrincipalKey)
# #     ARM_SUBSCRIPTION_ID: $(subscriptionId)
# #     ARM_TENANT_ID: $(tenantId)
